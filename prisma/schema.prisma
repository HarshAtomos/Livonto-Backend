generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}
        
enum user_role {
  ADMIN
  MANAGER
  EMPLOYEE
  PROPERTY_OWNER
  USER
}

enum property_availability {
  BOYS
  GIRLS
  COED
}

enum preferred_tenants {
  STUDENTS
  WORKING_PROFESSIONALS
  ANYONE
}

enum food_availability {
  VEGETARIAN
  NON_VEGETARIAN
  BOTH
  NONE
}

enum property_status {
  UNLISTED
  AVAILABLE
  OCCUPIED
  PENDING_APPROVAL
  REJECTED
}

enum occupancy_type {
  SINGLE
  DOUBLE
  TRIPLE
  OTHERS
}

enum booking_status {
  PAID
  ACTIVE
  EXPIRED
}

enum visit_status {
  PENDING_APPROVAL
  CONFIRMED
  CANCELLED
  COMPLETED
  DELAYED
}

model User {
  id             String   @id @default(uuid())
  name           String?
  username       String? @unique
  googleId       String? @unique
  email          String? @unique
  password       String?
  role           user_role @default(USER)
  phone          String?
  city           String?
  address        String?
  profileImage   String?
  occupation     String?
  gender         String?
  referralCode   String?
  referrals      Int      @default(0)
  paidReferrals  Int      @default(0)
  managerId      String?
  manager        User?    @relation("UserManager", fields: [managerId], references: [id])
  employees      User[]   @relation("UserManager")

  ownedProperties   Property[] @relation("OwnedProperties")
  managedProperties Property[] @relation("ManagedProperties")
  reviews           Review[]
  visitsAsUser      Visit[]    @relation("VisitUser")
  visitsAsManager   Visit[]    @relation("VisitManager")
  visitsAsEmployee  Visit[]    @relation("VisitEmployee")
  bookings          Booking[]
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model Property {
  id             String   @id @default(uuid())
  name           String
  description    String?
  address        String?
  googleMapLocation String?
  landmarks      String[]
  depositAmount  Decimal?  @db.Decimal
  noticePeriod   Int? @default(0)
  noticePeriodUnit String? @default("days")
  availableFor   property_availability? @default(COED)
  preferredTenants preferred_tenants? @default(ANYONE)
  operatingSince String? @default("2025")
  electricityCharges String?  @default("As per Usage")
  foodAvailability food_availability? @default(NONE)
  gateClosingTime String? @default("No Gate Closing time")
  status         property_status? @default(UNLISTED)
  totalBeds     Int?
  totalAvailableBeds Int?

  ownerId        String?
  managerId      String?
  owner          User?      @relation("OwnedProperties", fields: [ownerId], references: [id])
  manager        User?      @relation("ManagedProperties", fields: [managerId], references: [id])

  rooms          Room[]
  images         PropertyImage[]
  reviews        Review[]
  visits         Visit[]
  bookings       Booking[]
  propertyAmenities PropertyAmenity[]
  propertyHouseRules PropertyHouseRule[]
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model Room {
  id             String   @id @default(uuid())
  propertyId     String
  occupancyType  occupancy_type?
  numberOfBeds   Int?
  rent           Decimal?        @db.Decimal
  roomDimension  String?
  numberOfRooms  Int?
  numberOfAvailableRooms Int?
  property       Property       @relation(fields: [propertyId], references: [id])
  bookingRooms   BookingRoom[]
  roomAmenities  RoomAmenity[]
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model PropertyImage {
  id             String   @id @default(uuid())
  propertyId     String
  url            String
  title          String?
  tag            String? 
  description    String?

  property       Property  @relation(fields: [propertyId], references: [id])
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model Review {
  id             String   @id @default(uuid())
  propertyId     String
  userId         String
  rating         Int
  review         String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  property       Property @relation(fields: [propertyId], references: [id])
  user           User     @relation(fields: [userId], references: [id])
}

model Visit {
  id             String   @id @default(uuid())
  propertyId     String
  userId         String
  managerId      String?
  employeeId     String?
  additionalInfo String?
  scheduledAt   DateTime?
  status         visit_status @default(PENDING_APPROVAL)
  feedback       String?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime @updatedAt

  property       Property     @relation(fields: [propertyId], references: [id])
  user           User         @relation("VisitUser", fields: [userId], references: [id])
  manager        User?        @relation("VisitManager", fields: [managerId], references: [id])
  employee       User?        @relation("VisitEmployee", fields: [employeeId], references: [id])
  booking        Booking?     @relation("VisitBooking")
}

model Booking {
  id                String       @id
  visitId           String       @unique
  propertyId        String
  userId            String
  paymentAmount     Decimal      @db.Decimal
  paymentTimestamp  DateTime     @default(now())
  validity          DateTime
  status            booking_status

  visit    Visit    @relation("VisitBooking", fields: [visitId], references: [id])
  property Property @relation(fields: [propertyId], references: [id])
  user     User     @relation(fields: [userId], references: [id])
  
  bookingRooms BookingRoom[]
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model BookingRoom {
  bookingId      String
  roomId         String
  quantity       Int

  booking        Booking @relation(fields: [bookingId], references: [id])
  room           Room    @relation(fields: [roomId], references: [id])
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@id([bookingId, roomId])
}

model Amenity {
  id             String   @id @default(uuid())
  name           String
  description    String?
  svgIcon        String?
  propertyAmenities PropertyAmenity[]
  roomAmenities     RoomAmenity[]
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model HouseRule {
  id             String   @id @default(uuid())
  rule           String
  description    String?
  svgIcon        String?
  propertyHouseRules PropertyHouseRule[]
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model PropertyAmenity {
  propertyId     String
  amenityId       String

  property       Property @relation(fields: [propertyId], references: [id])
  amenity         Amenity  @relation(fields: [amenityId], references: [id])
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@id([propertyId, amenityId])
}

model PropertyHouseRule {
  propertyId     String
  houseRuleId    String

  property       Property  @relation(fields: [propertyId], references: [id])
  houseRule      HouseRule @relation(fields: [houseRuleId], references: [id])
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@id([propertyId, houseRuleId])
}

model RoomAmenity {
  roomId         String
  amenityId       String

  room           Room    @relation(fields: [roomId], references: [id])
  amenity         Amenity @relation(fields: [amenityId], references: [id])
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@id([roomId, amenityId])
}
