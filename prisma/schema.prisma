generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}
        
model Role {
  id        Int      @id @default(autoincrement())
  role_name String?   
  users     User[]
  @@map("roles")
}

model User {
  id             Int        @id @default(autoincrement())
  username       String     @unique
  googleId       String?    @unique
  email          String?     @unique
  password       String?
  role_id        Int        @default(1)
  role           Role       @relation(fields: [role_id], references: [id])
  first_name     String?    
  last_name      String?    
  phone_number   String?    
  city           String?    
  address        String?    
  profile_image  String?    
  occupation     String?    
  created_at     DateTime   @default(now())
  employees      Employee[] @relation("UserEmployees")
  managedEmployees Employee[] @relation("ManagerEmployees")
  properties     Property[] @relation("PropertyOwner")
  managedProperties Property[] @relation("PropertyManager")
  reviews        Review[]
  bookings       Booking[]
  visits         Visit[]
  complaints     Complaint[]
  favorites      Favorite[]
  employeeVisits Visit[]  @relation("EmployeeVisits")
  visitFeedbacks VisitFeedback[]

  @@map("users")
}

model Employee {
  id      Int   @id @default(autoincrement())
  user_id Int
  user    User  @relation("UserEmployees", fields: [user_id], references: [id])
  manager Int
  managerUser    User  @relation("ManagerEmployees", fields: [manager], references: [id])
  @@map("employees")
}

enum PropertyStatus {
  available
  occupied
  under_maintenance
  pending_approval
  rejected
}

enum PropertyGender {
  male
  female
  mixed
}

model Property {
  id              Int            @id @default(autoincrement())
  name            String          
  description     String?        
  address         String         
  city            String         
  gender          PropertyGender @default(mixed)
  wannabe_property_owner Json
  property_owner_id Int?
  property_owner    User?         @relation("PropertyOwner", fields: [property_owner_id], references: [id])
  manager_id      Int?
  manager         User?           @relation("PropertyManager", fields: [manager_id], references: [id])
  status          PropertyStatus @default(pending_approval)
  created_at      DateTime       @default(now())
  landmarks       String[]
  amenities       String[]
  tags            String[]
  property_images PropertyImage[]
  room_types      RoomType[]
  reviews         Review[]
  visits          Visit[]
  complaints      Complaint[]
  favorites       Favorite[]
  @@map("properties")
}

model PropertyImage {
  id          Int     @id @default(autoincrement())
  property_id Int
  property    Property @relation(fields: [property_id], references: [id])
  image_url   String  
  title       String?
  tags        String? @default("all")
  description String? 

  @@map("property_images")
}

model RoomType {
  id              Int      @id @default(autoincrement())
  property_id     Int
  property        Property @relation(fields: [property_id], references: [id])
  name            String  
  description     String? 
  price           Decimal 
  total_beds      Int
  available_beds  Int
  occupancy_gender String 
  amenities       String[]
  bookings        Booking[]
  @@map("room_types")
}

model Review {
  id         Int      @id @default(autoincrement())
  property_id Int
  property    Property @relation(fields: [property_id], references: [id])
  user_id     Int
  user        User     @relation(fields: [user_id], references: [id])
  rating     Int
  comment    String? 
  created_at DateTime @default(now())

  @@map("reviews")
}

enum BookingStatus {
  pending_approval
  active
  expired
}

model Booking {
  id            Int      @id @default(autoincrement())
  user_id       Int
  user          User     @relation(fields: [user_id], references: [id])
  room_type_id  Int
  room_type     RoomType @relation(fields: [room_type_id], references: [id])
  booking_date  DateTime 
  check_in_date DateTime 
  check_out_date DateTime? 
  rent_amount   Decimal 
  security_deposit Decimal? 
  payment_status String? 
  status         BookingStatus @default(pending_approval)
  created_at    DateTime @default(now())

  @@map("bookings")
}

enum VisitStatus {
  pending_approval
  approved
  cancelled
  completed
}

model Visit {
  id             Int       @id @default(autoincrement())
  user_id        Int
  user           User      @relation(fields: [user_id], references: [id])
  property_id    Int
  property       Property  @relation(fields: [property_id], references: [id])
  scheduled_date DateTime? 
  scheduled_time DateTime? 
  employee_id    Int?
  employee       User? @relation("EmployeeVisits", fields: [employee_id], references: [id])
  status         VisitStatus? @default(pending_approval)
  notes          String?
  feedback       VisitFeedback[]
  created_at     DateTime  @default(now())

  @@map("visits")
}

model VisitFeedback {
  id           Int      @id @default(autoincrement())
  user_id      Int
  user         User     @relation(fields: [user_id], references: [id])
  visit_id     Int
  visit        Visit    @relation(fields: [visit_id], references: [id])
  feedback     String
  created_at   DateTime @default(now())

  @@map("visit_feedbacks")
}

model Complaint {
  id           Int      @id @default(autoincrement())
  user_id      Int
  user         User     @relation(fields: [user_id], references: [id])
  property_id  Int?
  property     Property? @relation(fields: [property_id], references: [id])
  title        String
  description  String
  category     String
  priority     String? @default("low")
  resolution   String?
  status       String?  @default("active")
  created_at   DateTime @default(now())

  @@map("complaints")
}

model Favorite {
  user_id     Int
  user        User     @relation(fields: [user_id], references: [id])
  property_id Int
  property    Property @relation(fields: [property_id], references: [id])
  created_at  DateTime @default(now())

  @@id([user_id, property_id])
  @@map("favorites")
}
